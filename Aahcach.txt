import matplotlib.pyplot as plt

# Step 1: Pivot data for stacked area
pivoted = df_with_overall.pivot_table(
    index="MONTH",
    columns="BUSINESS_GROUPS_TA",
    values="MONTHLY_ATTRITION_RATE",
    aggfunc="sum"
)

# Step 2: Plot stacked area (all groups except Overall)
groups_to_plot = [c for c in pivoted.columns if c != "Overall"]
pivoted[groups_to_plot].plot(
    kind="area",
    stacked=True,
    figsize=(20, 10),
    alpha=0.6
)

# Step 3: Overlay "Overall" as dashed line
plt.plot(
    pivoted.index,
    pivoted["Overall"],
    color="black",         # highlight color
    linestyle="--",        # dashed line
    linewidth=2.5,
    label="Overall (highlighted)"
)

# Step 4: Formatting
plt.title("Attrition Contribution by Business Groups (with Overall Highlighted)",
          fontsize=20, fontweight="bold")
plt.ylabel("Attrition Rate")
plt.xlabel("Month")
plt.legend(loc="upper left", bbox_to_anchor=(1,1))  # push legend outside
plt.xticks(rotation=45)
plt.show()










import pandas as pd

# Read your dataset
df = pd.read_excel("Monthly_attrition.xlsx")

# Step 1: Convert MONTH to datetime (if not already)
df["MONTH"] = pd.to_datetime(df["MONTH"])

# Step 2: Aggregate monthwise across all business groups
overall = df.groupby("MONTH").agg({
    "HEADCOUNT": "sum",
    "VOLUNTARY_EXITS": "sum"
}).reset_index()

# Step 3: Recalculate overall attrition rate
overall["MONTHLY_ATTRITION_RATE"] = overall["VOLUNTARY_EXITS"] / overall["HEADCOUNT"]

# Step 4: Add a new column to mark this group as "Overall"
overall["BUSINESS_GROUPS_TA"] = "Overall"

# Step 5: Reorder columns to match original structure
overall = overall[["BUSINESS_GROUPS_TA", "MONTH", "HEADCOUNT", "VOLUNTARY_EXITS", "MONTHLY_ATTRITION_RATE"]]

# Step 6: Append back to the original dataframe (optional)
df_with_overall = pd.concat([df, overall], ignore_index=True)

# âœ… Now df_with_overall contains all business groups + an extra "Overall"
print(df_with_overall.tail(12))  # see last few months with overall












# --------------------------
# 8. Convert Forecasted Rates into Headcount
# --------------------------

# Take latest known headcount from your dataset (Aug 2025)
last_known_date = df["MONTH"].max()
last_known_headcount = df.loc[df["MONTH"] == last_known_date, "HEADCOUNT"].sum()

print("Last known date:", last_known_date)
print("Last known headcount:", last_known_headcount)

# Forecasted attrition rates (from your future_forecast)
future_forecast = pd.Series(
    model.predict(n_periods=25),  # e.g., next 25 months
    index=pd.date_range(start="2025-09-01", periods=25, freq="MS")
)

# Initialize headcount projection
forecast_df = pd.DataFrame({"Attrition_Rate": future_forecast})
forecast_df["Headcount"] = None

# Set initial headcount
prev_headcount = last_known_headcount

# Iteratively compute future headcount
for i, row in forecast_df.iterrows():
    exits = prev_headcount * row["Attrition_Rate"]
    new_headcount = prev_headcount - exits
    forecast_df.at[i, "Headcount"] = new_headcount
    prev_headcount = new_headcount  # update for next month

# --------------------------
# 9. Results
# --------------------------
print(forecast_df.head(10))   # first few months forecast
print(forecast_df.tail(5))    # last few months

# Plot headcount projection
plt.figure(figsize=(12,6))
plt.plot(forecast_df["Headcount"], label="Forecasted Headcount", color="red")
plt.title("Projected Headcount (Based on Forecasted Attrition)")
plt.xlabel("Date")
plt.ylabel("Headcount")
plt.legend()
plt.show()
