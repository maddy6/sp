import numpy as np
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib as mpl

# Example dummy df (replace with your real df)
# df = pd.DataFrame({
#     'BUSINESS_GROUPS':['A','B','C'],
#     'CURRENT_HEADCOUNT':[100,200,150],
#     'attrition_frac':[0.1,0.25,0.4],
#     'new_error_pct':[0.05,0.2,0.1]
# })

# 1️⃣ Compute similarity matrix
features = np.c_[df['attrition_frac'], df['new_error_pct']]
sim = cosine_similarity(features)
np.fill_diagonal(sim, 0)
threshold = 0.9

# 2️⃣ Build Graph
G = nx.Graph()
for i, g in enumerate(df['BUSINESS_GROUPS']):
    G.add_node(
        g,
        size=df['CURRENT_HEADCOUNT'].iloc[i],
        color=df['attrition_frac'].iloc[i]
    )

for i in range(len(df)):
    for j in range(i + 1, len(df)):
        if sim[i, j] > threshold:
            G.add_edge(df['BUSINESS_GROUPS'].iloc[i],
                       df['BUSINESS_GROUPS'].iloc[j],
                       weight=sim[i, j])

# 3️⃣ Prepare node attributes
pos = nx.spring_layout(G, k=0.5)
sizes = [G.nodes[n]['size'] * 5 for n in G.nodes()]
colors = [G.nodes[n]['color'] for n in G.nodes()]

# 4️⃣ Draw graph
plt.figure(figsize=(10, 8))
nodes = nx.draw_networkx_nodes(G, pos, node_size=sizes,
                               node_color=colors, cmap=plt.cm.Reds)
nx.draw_networkx_labels(G, pos)
nx.draw_networkx_edges(G, pos, edge_color='gray')

plt.title("Business Group Risk Map (size=headcount, color=attrition%)")

# 5️⃣ Add colorbar properly
norm = mpl.colors.Normalize(vmin=min(colors), vmax=max(colors))
sm = mpl.cm.ScalarMappable(cmap=plt.cm.Reds, norm=norm)
sm.set_array([])  # needed for colorbar
cbar = plt.colorbar(sm)
cbar.set_label('Attrition Fraction')

plt.show()
