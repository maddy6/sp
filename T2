Here is the SHAP analysis code for your H2O GBM model:


---

Step 1: Train H2O GBM Model

import h2o
from h2o.estimators import H2OGradientBoostingEstimator

h2o.init()

# Load dataset
df_h2o = h2o.import_file("transactions.csv")

# Define features and target
x = df_h2o.columns[:-1]  # All columns except target
y = "fraud_ind"  # Target column

# Convert target column to categorical if it's not already
df_h2o[y] = df_h2o[y].asfactor()

# Train H2O GBM model
gbm = H2OGradientBoostingEstimator(ntrees=100, max_depth=5, learn_rate=0.1, seed=42)
gbm.train(x=x, y=y, training_frame=df_h2o)


---

Step 2: SHAP Analysis

import matplotlib.pyplot as plt
import shap

# Convert H2O frame to Pandas for SHAP analysis
df_pandas = df_h2o.as_data_frame()

# Get SHAP values using TreeExplainer
explainer = shap.TreeExplainer(gbm)
shap_values = explainer.shap_values(df_pandas[x])

# **Plot Feature Importance**
shap.summary_plot(shap_values, df_pandas[x])


---

Step 3: SHAP Dependence Plot (Feature-Wise Analysis)

# Example: SHAP dependence plot for 'transaction_amount'
shap.dependence_plot("transaction_amount", shap_values, df_pandas[x])


---

Step 4: SHAP Force Plot (Individual Prediction Analysis)

# Select a sample transaction for detailed explanation
sample_index = 0
shap.force_plot(explainer.expected_value, shap_values[sample_index, :], df_pandas.iloc[sample_index, :-1])







5. Anomaly-Based Outlier Features

Use Isolation Forest to detect rare fraud patterns.

Implementation:

from h2o.estimators import H2OIsolationForestEstimator

iso_forest = H2OIsolationForestEstimator(ntrees=100, sample_size=256, seed=42)

iso_forest.train(x=['transaction_amount', 'merchant_id', 'terminal_id', 'customer_id'], training_frame=df_h2o)

df_h2o['iso_forest_score'] = iso_forest.predict(df_h2o)["anomaly_score"]
---

Interpreting SHAP Results

Summary Plot: Shows overall feature impact on fraud prediction.

Dependence Plot: Helps understand how a specific feature influences fraud probability.

Force Plot: Explains an individual prediction.


Let me know if you need modifications or a more efficient SHAP computation method!
